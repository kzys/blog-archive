<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="blog.css" />
  <title>2008-08-07T01:02:18+09:00</title>
</head>

<body>
  <div class="entry">
    <h1>2008-08-07T01:02:18+09:00</h1>

    <p>
その WEwLC (Working Effectively With Legacy Code) の読書会の第三回。今回は遅刻したけど一応皆勤、なのに一度も発表していないです。次回こそ。
</p>
<p>
9章:
</p>
<ul><li>(遅刻したので途中から)</li></ul>
<ul><li>囲みの &quot;Test Code vs. Production Code&quot; のからみで、テストコードの重複は気にするか否かという議論があった。おれは気にするけど、あえて愚直に書くという派もあるらしい。でも「関数を追うのはわかりにくい」は OOP 禁止令の近所な気がする。
</li><li>テストの粒度というか、モックで前後を固めたらリファクタリングの影響するコード量が増えて良くなかったという話もここで。</li></ul>
<ul><li>Global Dependency として出てくる Singleton でいろいろ。つーかグローバル変数だしね。GoF のひとはそろそろだめなパターンについて総括してほしいとか。
</li><li>(designpattern-users.jp とかいま思いついた。まぁ、あのフォーマットに乗る必要は今更ないと思うけど、位置づけとしてはああいう)</li></ul>
<ul><li>C++ のはなしは、個人的には、本の中でやろうとしていることがよくわからなかった。
</li><li>既存のコードへのテストはホワイトボックステストになりがち、というはなしも。</li></ul>
<p>
10章:
</p>
<ul><li>CCAImage はテストのためにカプセル化をゆるめるのはどうよという議論が。
</li><li>final クラス (Java, 継承できない) はみんな思い出があるらしい。意思の感じられない final クラスとか、迷信に基づく高速かの final クラスとか。
</li><li>GUI のテストは書くのが偉いと思った。Frame 継承するのかというのはさておき。</li></ul>
<p>
11章:
</p>
<ul><li>例1がコードジェネレータなこと、いまひとつ活用されてない effective sketch, 例2の実装のひどさとつっこまれまくり。</li></ul>
<p>
12章:
</p>
<ul><li>effective sketch の続きらしく抽象的な話とチラ見せのコードとで進むので、みんな困っていた。</li></ul>
<p>
ほかの読書会がどうなのかは知らないけど、WEwLC は発表方法にしばりがないのも面白いです。説得じゃなくて議論のためのプレゼンとか、いろいろ考えたくなる。
</p>
  </div>
</body>
</html>
